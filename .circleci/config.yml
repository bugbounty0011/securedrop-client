---
common-steps:
  - &install_poetry
    run:
      name: Install Poetry
      command: |
        set -e
        source /etc/os-release
        if [[ "$VERSION_CODENAME" == "bullseye" ]]; then
            # Install Poetry via PyPI
            apt-get update && apt-get install --yes --no-install-recommends python3-pip
            pip install poetry==1.6.1
        elif [[ "$VERSION_CODENAME" == "bookworm" ]]; then
            # Install Poetry via system package
            apt-get update && apt-get install --yes --no-install-recommends python3-poetry
        else
            echo "Unsupported Debian version: $VERSION_CODENAME"
            exit 1
        fi

  - &install_testing_dependencies
    run:
      name: Install testing dependencies
      command: |
        set -e
        apt update && apt install -y git gnupg libarchive13 libmagic1 libqt5x11extras5 make python3-tk python3-dev gnupg python3-venv sqlite3 xvfb
        poetry install --no-ansi

  - &configure_locales
    run:
      name: Configure locales
      command: |
        set -e
        apt update && apt install -y locales
        echo "en_US ISO-8859-1" >> /etc/locale.gen
        echo "en_US UTF-8" >> /etc/locale.gen
        locale-gen

  - &install_build_dependencies
    run:
      name: Install build dependencies
      command: |
        apt update && apt install -y git make sudo

  - &run_unit_tests
    run:
      name: Install requirements and run unit tests
      command: |
        export PYTHONPATH=$PYTHONPATH:.  # so alembic can get to Base metadata
        make test-random

  - &run_integration_tests
    run:
      name: Install requirements and run integration tests
      command: |
        export PYTHONPATH=$PYTHONPATH:.  # so alembic can get to Base metadata
        make test-integration

  - &run_functional_tests
    run:
      name: Install requirements and run functional tests
      command: |
        export PYTHONPATH=$PYTHONPATH:.  # so alembic can get to Base metadata
        make test-functional

  - &run_lint
    run:
      name: Run lint, type checking, code formatting
      command: |
        make check-black check-isort lint mypy

  - &check_security
    run:
      name: Run static analysis on source code to find security issues
      command: |
        make semgrep bandit

  - &check_source_strings
    run:
      name: Check that source strings are updated
      command: |
        make check-strings

  - &check_mo_repro
    run:
      name: Check that translation machine objects are reproducible
      command: |
        make verify-mo

  - &check_python_dependencies_for_vulnerabilities
    run:
      name: Check Python dependencies for known vulnerabilities
      command: |
        make safety

  - &install_packaging_dependencies
    run:
      name: Install Debian packaging dependencies and download Python wheels
      command: |
        set -x
        mkdir ~/packaging && cd ~/packaging
        # local builds may not have an ssh url, so || true
        git config --global --unset url.ssh://git@github.com.insteadof || true
        git clone https://github.com/freedomofpress/securedrop-builder.git
        cd securedrop-builder
        apt-get update && apt-get install -y sudo make
        make install-deps
        source .venv/bin/activate
        PKG_DIR=~/project make requirements

  - &check_packaging_requirements
    run:
      name: Ensure that the same Python requirements are used for packaging and production.
      command: |
        cd ~/project
        # Fail if unstaged changes exist that are not comments (after `make requirements` in the previous run step).
        git diff --ignore-matching-lines=# --exit-code

  - &build_debian_package
    run:
      name: Build debian package
      command: |
        cd ~/project
        ./update_version.sh 1000.0  # Dummy version number, doesn't matter what we put here
        cd ~/packaging/securedrop-builder
        export PKG_VERSION=1000.0
        export PKG_PATH=~/project/
        source .venv/bin/activate
        make securedrop-client

version: 2.1

jobs:
  build:
    parameters: &parameters
      image:
        type: string
    docker: &docker
      - image: debian:<< parameters.image >>
    steps:
      - *install_build_dependencies
      - checkout
      - *install_packaging_dependencies
      - *check_packaging_requirements
      - *build_debian_package

  unit-test:
    parameters: *parameters
    docker: *docker
    steps:
      - *install_poetry
      - checkout
      - *install_testing_dependencies
      - *configure_locales
      - *run_unit_tests
      - store_test_results:
          path: test-results

  integration-test:
    parameters: *parameters
    docker: *docker
    steps:
      - *install_poetry
      - checkout
      - *install_testing_dependencies
      - *run_integration_tests

  functional-test:
    parameters: *parameters
    docker: *docker
    steps:
      - *install_poetry
      - checkout
      - *install_testing_dependencies
      - *run_functional_tests

  lint:
    parameters: *parameters
    docker: *docker
    steps:
      - *install_poetry
      - checkout
      - *install_testing_dependencies
      - *run_lint

  check-security:
    parameters: *parameters
    docker: *docker
    steps:
      - *install_poetry
      - checkout
      - *install_testing_dependencies
      - *check_security

  check-python-security:
    parameters: *parameters
    docker: *docker
    steps:
      - *install_poetry
      - checkout
      - *install_testing_dependencies
      - *check_python_dependencies_for_vulnerabilities


  check-internationalization:
    parameters: *parameters
    docker: *docker
    steps:
      - *install_poetry
      - checkout
      - *install_testing_dependencies
      - *check_source_strings
      - *check_mo_repro

workflows:
  securedrop_client_ci:
    jobs: &jobs
      - unit-test:
          matrix: &matrix
            parameters:
              image:
                - bullseye
                - bookworm
      - integration-test:
          matrix: *matrix
      - functional-test:
          matrix: *matrix
      - lint:
          matrix: *matrix
      - check-security:
          matrix: *matrix
      - check-python-security:
          matrix: *matrix
      - check-internationalization:
          matrix: *matrix
      - build:
          matrix: *matrix

  nightly:
    triggers:
      - schedule:
          cron: "0 6 * * *"
          filters:
            branches:
              only:
                - main
    jobs: *jobs
